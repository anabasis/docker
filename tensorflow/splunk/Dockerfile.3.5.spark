# Start from base image: basic linux or nvidia-cuda
ARG BASE_IMAGE
FROM ${BASE_IMAGE}
ARG TAG

USER root

RUN pip install flask waitress 
# Install basic frameworks
#RUN conda install -n base nb_conda waitress nodejs datashader tensorflow-gpu pytorch gensim dask-ml 

# Setup jupyter lab extensions
#RUN pip install jupyter-tensorboard
#RUN jupyter labextension install jupyterlab_tensorboard
#RUN jupyter serverextension enable --py --sys-prefix jupyter_tensorboard
#RUN jupyter tensorboard enable --user 
RUN pip install pyopenssl mlflow pyspark

RUN mkdir /dltk
# Define working directory
WORKDIR /srv

# Copy bootstrap entry point script
COPY bootstrap_spark.sh /dltk/
COPY app /dltk/app
COPY notebooks /dltk/notebooks
# Copy certificates generated with
# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout dltk.key -out dltk.pem
COPY config/dltk.key /dltk/.jupyter/dltk.key
COPY config/dltk.pem /dltk/.jupyter/dltk.pem
# Copy jupyter config
COPY config/jupyter_notebook_config.py /dltk/.jupyter/jupyter_notebook_config.py
# Copy jupyter notebook conversion template to export python module
COPY config/jupyter_notebook_template.tpl /dltk/.jupyter/jupyter_notebook_conversion.tpl
COPY config/null.tpl /dltk/.jupyter/null.tpl

# Handle user rights
RUN chgrp -R 0 /dltk && \
    chmod -R g=u /dltk
RUN chgrp -R 0 /srv && \
    chmod -R g=u /srv
RUN chmod g+w /etc/passwd
USER 1001

# Expose container port 5000 (MLTK Container Service) and 8888 (Notebook) and 6006 (Tensorboard)
EXPOSE 5000 8888 6006

# Define bootstrap as entry point to start container
ENTRYPOINT ["/dltk/bootstrap_spark.sh"]
